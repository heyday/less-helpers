// ==========================================================================
// Mixins
// ==========================================================================
@import (multiple, less) "bootstrap/less/mixins.less";

// Global mixins file, all global helper mixins should go into this file

// bg-retina
//============================================================
//
// @param color: transparent, #ff0000, rgba(255, 0, 0, 0.5), etc
// @param filename: logo.png, bg.jpg etc.
// @param x: left, 50px, 0%, etc
// @param y: top, 50px, 0%, etc
// @param width: 120px, 50% etc
// @param height: 120px, 50% etc
//
// @example: .bg-retina( transparent, 'logo.png', 0%, 0%, no-repeat, 100px, 50px);

.bg-retina( @color: 'transparent', @filename, @x, @y, @repeat: 'no-repeat', @width, @height ) {
	background: @color url("@{filename}") @x @y @repeat;
	@media @retina {
		@src: ~`@{filename}.split( /(.gif|.png|.jpg|.jpeg)/, 2 ).join( '@2x' )`;
		background: @color url("@{src}") @x @y @repeat;
		background-size: @width @height;
	}
}


// text-shadow-fix
//============================================================

.text-shadow-fix() {
	text-shadow: rgba(0,0,0,0.1) 1px 1px;
}


// clear-filter
//============================================================

.clear-filter() {
	filter: none;
	-ms-filter: none;
}

// border-radius
//============================================================
// @see http://www.w3.org/TR/css3-background/#border-radius
//
// @param top-left-radius     :  px, em, %
// @param top-right-radius    :  px, em, %
// @param bottom-right-radius :  px, em, %
// @param bottom-left-radius  :  px, em, %
//
// @example: .border-radius(10px);
// @example: .border-radius(10px, 10px, 0px, 0px);

// To be removed in next major release.
// Keeping for backwards compatibility.

.border-radius(...) {
	border-radius: @arguments;
}


// linear-gradient
//============================================================
// @see http://dev.w3.org/csswg/css3-images/#linear-gradients
//
// @param dir                 :  top, left, 90deg
// @param start-color         :  #000, rgba(255,255,255,0.5)
// @param end-color           :  #000, rgba(255,255,255,0.5)
//
// NOTE: The direction for the IE gradient is automagically
// worked out for you based either on the direction or the
// angle that you pass in. Obviously it will only be a
// horizontal or vertical gradient, but it's still awesome.
//
// ALSO: Support for rgba is covered in IE too. Values are
// converted to aRGB.
//
// @example .linear-gradient(50deg,  #eee, #aaa); (IE auto included)
//
// @example .linear-gradient-multi(~'top, #eee 0%, #aaa 50%, #eee 100%');
//          .linear-gradient-ie(top, #eee, #aaa);

.linear-gradient( @dir: top, @start-color: #eee, @end-color: #aaa ) {
	background: -webkit-linear-gradient(@dir, @start-color 0%, @end-color 100%);
	background: -moz-linear-gradient(@dir, @start-color 0%, @end-color 100%);
	background: -ms-linear-gradient(@dir, @start-color 0%, @end-color 100%);
	background: -o-linear-gradient(@dir, @start-color 0%, @end-color 100%);
	background: linear-gradient(@dir, @start-color 0%, @end-color 100%);
	.linear-gradient-ie( @dir, @start-color, @end-color);
}

.linear-gradient-multi( ... ) {
	background-image: -webkit-linear-gradient(@arguments);
	background-image: -moz-linear-gradient(@arguments);
	background-image: -ms-linear-gradient(@arguments);
	background-image: -o-linear-gradient(@arguments);
	background-image: linear-gradient(@arguments);
}

.linear-gradient-ie( @dir, @start-color, @end-color) when (@dir = top),
	not ( isstring(@dir) ) and ( @dir >= 225 ) and ( @dir < 315 ),
	not ( isstring(@dir) ) and ( @dir >= -135 ) and ( @dir < -45 ) {
		.linear-gradient-ie-filter(@start-color, @end-color, 0);
}
.linear-gradient-ie( @dir, @start-color, @end-color) when (@dir = right),
	not ( isstring(@dir) ) and ( @dir >= 135 ) and ( @dir < 225 ),
	not ( isstring(@dir) ) and ( @dir >= -225 ) and ( @dir < -135 ) {
		.linear-gradient-ie-filter(@end-color, @start-color, 1);
}
.linear-gradient-ie( @dir, @start-color, @end-color) when (@dir = bottom),
	not ( isstring(@dir) ) and ( @dir >= 45 ) and ( @dir < 135 ),
	not ( isstring(@dir) ) and ( @dir >= -315 ) and ( @dir < -225 ) {
		.linear-gradient-ie-filter(@end-color, @start-color, 0);
}
.linear-gradient-ie( @dir, @start-color, @end-color) when (@dir = left),
	not ( isstring(@dir) ) and ( @dir >= 315 ) and ( @dir < 360 ),
	not ( isstring(@dir) ) and ( @dir >= -45 ) and ( @dir < 45 ),
	not ( isstring(@dir) ) and ( @dir < -315 ) and ( @dir >= -360 ) {
		.linear-gradient-ie-filter(@start-color, @end-color, 1);
}

.linear-gradient-ie-filter( @start: #eee, @end: #aaa, @type: 1 ) {
	@c-start: argb( @start );
	@c-end:   argb( @end );
	filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@{c-start}', endColorstr='@{c-end}', GradientType=@{type})";
	-ms-filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@{c-start}',endColorstr='@{c-end}',GradientType=@{type})";
}


// radial-gradient
//============================================================
// @see http://dev.w3.org/csswg/css3-images/#radial-gradients
//
// @param position            :  left top, 50% 50%
// @param shape               :  circle, ellipse, 100% 75%
// @param colorA              :  #000 0%, red 0%
// @param colorB              :  #000 50%, red 50%
// @param colorC              :  #000 100%, red 100%
//
// @example .radial-gradient(~'50% 50%,', circle, ~',crimson 0%', ~',black 100%');

.radial-gradient(...) {
	background-image: -webkit-radial-gradient(@arguments);
	background-image: -moz-radial-gradient(@arguments);
	background-image: -ms-radial-gradient(@arguments);
	background-image: -o-radial-gradient(@arguments);
	background-image: radial-gradient(@arguments);
}


// transform
//============================================================
// @see http://www.w3.org/TR/css3-2d-transforms/
//
// @param functions           :  matrix()
//                            :  translate()
//                            :  scale()
//                            :  rotate()
//                            :  skew()
//
// @example : .transform( rotate( 30deg ) );

// To be removed in next major release in favour of Bootstrap API.
// Keeping for backwards compatibility.

.transform(...) {
	-webkit-transform: @arguments;
		-ms-transform: @arguments;
			transform: @arguments;
}


// transform-style
//============================================================
// @see http://www.w3.org/TR/css3-3d-transforms/#transform-style-property
//
// @param value               :  preserve-3d | flat
//
// @example : .transform-style( preserve-3d );

.transform-style(...) {
	-webkit-transform-style: @arguments;
		-ms-transform-style: @arguments;
			transform-style: @arguments;
}
